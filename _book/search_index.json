[
["index.html", "R package workshop Preface About this workshop Requirements", " R package workshop COMBINE Australia 2019-08-04 Preface About this workshop This workshop was created by COMBINE, an association for Australian students in bioinformatics, computational biology and related fields. You can find out more about COMBINE at http://combine.org.au. The goal of this workshop is to explain the basics of R package development. By the end of the workshop you should have your own minimal R package that you can use to store your personal functions. The materials were written using the bookdown package (Xie 2019), which is built on top of R Markdown and knitr (Xie 2015). Requirements The workshop assumes that you are familar with basic R and the RStudio IDE. This includes topics such as installing packages, assigning variables and writing functions. If you are not comfortable with these you may need to complete an introductory R workshop first. R and RStudio You will need a recent version of R and RStudio. These materials were written using R version 3.6.0 (2019-04-26) and RStudio version 1.2.1335. You can download R from https://cloud.r-project.org/ and RStudio from https://www.rstudio.com/products/rstudio/download/. Packages The packages used in the workshop are below with the versions used in these materials: devtools (v2.0.2) usethis (v1.5.1) roxygen2 (v6.1.1) testthat (v2.1.1) knitr (v1.23) Please make sure these packages are installed before starting the workshop. You can install them by running the following code. pkgs &lt;- c(&quot;devtools&quot;, &quot;usethis&quot;, &quot;roxygen2&quot;, &quot;testhat&quot;, &quot;knitr&quot;) install.packages(pkgs) GitHub Version control using git is very useful and should be part of your package development process but it is outside the scope of this workshop. However, uploading your package to code sharing websites such as GitHub is the easiest way to distribute it. Towards the end of the workshop is a section showing you to upload your package to GitHub using R commands (no knowledge of git necessary). If you would like to try this and don’t already have a GitHub account please create one at https://github.com/join. References "],
["introduction.html", "1 Introduction 1.1 What is a package? 1.2 Why write a package?", " 1 Introduction 1.1 What is a package? An R package is a collection of functions that are bundled together in a way that lets them be easily shared. Usually these functions are designed to work together to complete a specific task such as analysing a particular kind of data. You are probably familiar with many packages already, for example ggplot2 or data.table. Packages can take various forms during their life cycle. For example the structure you use when writing package code is not exactly the same as what will be installed by somebody else. While you don’t need to know about these forms in detail to create a package it is useful to be aware of them. For more details have a look at the “What is a package?” section of Hadley Wickham’s “R packages” book (http://r-pkgs.had.co.nz/package.html#package). 1.2 Why write a package? Packages are the best way to distribute code and documentation, and as we are about to find out they are very simple to make. Even if you never intend to share your package it is useful to have a place to store your commonly used functions. You may have heard the advice that if you find yourself reusing code then you should turn it into a function so that you don’t have to keep rewriting it (along with other benefits). The same applies to functions. If you have some functions you reuse in different projects then it probably makes sense to put those in a package. It’s a bit more effort now but it will save you a lot of time in the long run. Of course often you will want to share your package, either to let other people use your functions or just so people can see what you have done (for example when you have code and data for a publication). If you are thinking about making a software package for public use there are a few things you should consider first: Is your idea new or is there already a package out there that does something similar? If there is does your package improve on it in some way? For example is it easier to use or does it have better performance? If a similar package exists could you help improve it rather than making a new one? Most package developers are open to collaboration and you may be able to achieve more by working together. 1.2.1 Packages for writing packages This workshop teaches a modern package development workflow that makes use of packages designed to help with writing packages. The two main packages are devtools and usethis. As you might gather from the name devtools contains functions that will help with development tasks such as checking, building and installing packages. The usethis package contains a range of templates and handy functions for making life easier, many of which were originally in devtools1. All of the core parts of package development can be performed in other ways such as typing commands on the command line or clicking buttons in RStudio but we choose to use these packages because they provide a consistent workflow with sensible defaults. Other packages we will use that will be introduced in the appropriate sections are: roxygen2 for function documentation testthat for writing unit tests knitr for building vignettes This is important to remember when looking at older tutorials or answers to questions on the internet. If devtools::func() doesn’t seem to exist any more try usethis::func() instead↩ "],
["setting-up.html", "2 Setting up 2.1 Open RStudio 2.2 Naming your package 2.3 Creating your package 2.4 Filling in the DESCRIPTION", " 2 Setting up 2.1 Open RStudio The first thing we need to do is open RStudio. Do this now. If you currently have a project open close it by clicking File &gt; Close project. 2.2 Naming your package Before we create our package we need to give it a name. Package names can only consist of letters, numbers and dots (.) and must start with a letter. While all of these are allowed it is generally best to stick to just lowercase letters. Having a mix of lower and upper case letters can be hard for users to remember (is it RColorBrewer or Rcolorbrewer or rcolorbrewer?). Believe it or not choosing a name can be one of the hardest parts of making a package! There is a balance between choosing a name that is unique enough that it is easy to find (and doesn’t already exist) and choosing something that makes it obvious what the package does. Acronyms or abbreviations are one option that often works well. It can be tricky to change the name of a package later so it is worth spending some time thinking about it before you start. Checking availability If there is even a small chance that your package might be used by other people it is worth checking that a package with your name doesn’t already exist. A handy tool for doing this is the available package. This package will check common package repositories for your name as well as things like Urban Dictionary to make sure your name doesn’t have some meanings you weren’t aware of! At the end of this workshop we want you to have a personal package that you can continue to add to and use so we suggest choosing a name that is specific to you. Something like your initials, a nickname or a username would be good options. For the example code we are going to use mypkg and you could use that for the workshop if you want to. 2.3 Creating your package To create a template for our package we will use the usethis::create_package() function. All it needs is a path to the directory where we want to create the package. For the example we put it on the desktop but you should put it somewhere more sensible. usethis::create_package(&quot;~/Desktop/mypkg&quot;) You will see some information printed to the console, something like (where USER is your username): ✔ Creating &#39;C:/Users/USER/Desktop/mypkg/&#39; ✔ Setting active project to &#39;C:/Users/USER/Desktop/mypkg&#39; ✔ Creating &#39;R/&#39; ✔ Writing &#39;DESCRIPTION&#39; Package: mypkg Title: What the Package Does (One Line, Title Case) Version: 0.0.0.9000 Authors@R (parsed): * First Last &lt;first.last@example.com&gt; [aut, cre] (&lt;https://orcid.org/YOUR-ORCID-ID&gt;) Description: What the package does (one paragraph). License: What license it uses Encoding: UTF-8 LazyData: true ✔ Writing &#39;NAMESPACE&#39; ✔ Writing &#39;mypkg.Rproj&#39; ✔ Adding &#39;.Rproj.user&#39; to &#39;.gitignore&#39; ✔ Adding &#39;^mypkg\\\\.Rproj$&#39;, &#39;^\\\\.Rproj\\\\.user$&#39; to &#39;.Rbuildignore&#39; ✔ Opening &#39;C:/Users/USER/Desktop/mypkg/&#39; in new RStudio session ✔ Setting active project to &#39;&lt;no active project&gt;&#39; You will see something similar whenever we run a usethis command. Green ticks indicate that a step has been completed correctly. If you ever see a red dot that means that there is something usethis can’t do for you and you will need to follow some instructions to do it manually. At the end a new RStudio window with your package should open. In this window you should see the following files: DESCRIPTION - The metadata file for your package. We will fill this in next and it will be updated as we develop our package. NAMESPACE - This file describes the functions in our package. Traditionally this has been a tricky file to get right but the modern development tools mean that we shouldn’t need to edit it manually. If you open it you will see a message telling you not to. R/ - This is the directory that will hold all our R code. These files are the minimal amount that is required for a package but we will create other files as we go along. Some other useful files have also been created by usethis. .gitignore - This is useful if you use git for version control. .Rbuildignore - This file is used to mark files that are in the directory but aren’t really part of the package and shouldn’t be included when we build it. Most of the time you won’t need to worry about this as usethis will edit it for you. mypkg.Rproj - The RStudio project file. Again you don’t need to worry about this. 2.4 Filling in the DESCRIPTION The DESCRIPTION file is one of the most important parts of a package. It contains all the metadata about the package, things like what the package is called, what version it is, a description, who the authors are, what other packages it depends on etc. Open the DESCRIPTION file and you should see something like this (with your package name). Package: mypkg Title: What the Package Does (One Line, Title Case) Version: 0.0.0.9000 Authors@R: person(given = &quot;First&quot;, family = &quot;Last&quot;, role = c(&quot;aut&quot;, &quot;cre&quot;), email = &quot;first.last@example.com&quot;, comment = c(ORCID = &quot;YOUR-ORCID-ID&quot;)) Description: What the package does (one paragraph). License: What license it uses Encoding: UTF-8 LazyData: true 2.4.1 Title and description The package name is already set correctly but most of the other fields need to be updated. First let’s update the title and description. The title should be a single line in Title Case that explains what your package is. The description is a paragraph which goes into a bit more detail. For example you could write something like this: Package: mypkg Title: My Personal Package Version: 0.0.0.9000 Authors@R: person(given = &quot;First&quot;, family = &quot;Last&quot;, role = c(&quot;aut&quot;, &quot;cre&quot;), email = &quot;first.last@example.com&quot;, comment = c(ORCID = &quot;YOUR-ORCID-ID&quot;)) Description: This is my personal package. It contains some handy functions that I find useful for my projects. License: What license it uses Encoding: UTF-8 LazyData: true 2.4.2 Authors The next thing we will update is the Authors@R field. There are a couple of ways to define the author for a package but Authors@R is the most flexible. The example shows us how to define an author. You can see that the example person has been assigned the author (“aut”) and creator (“cre”) roles. There must be at least one author and one creator for every package (they can be the same person) and the creator must have an email address. There are many possible roles (including woodcutter (“wdc”) and lyricist (“lyr”)) but the most important ones are: cre: the creator or maintainer of the package, the person who should be contacted with there are problems aut: authors, people who have made significant contributions to the package ctb: contributors, people who have made smaller contributions cph: copyright holder, useful if this is someone other than the creator (such as their employer) Adding an ORCID If you have an ORCID you can add it as a comment as shown in the example. Although not an official field this is recognised in various places (including CRAN) and is recommended if you want to get academic credit for your package (or have a common name that could be confused with other package authors). Update the author information with your details. If you need to add another author simply concatenate them using c() like you would with a normal vector. Package: mypkg Title: My Personal Package Version: 0.0.0.9000 Authors@R: c( person(given = &quot;Package&quot;, family = &quot;Creator&quot;, role = c(&quot;aut&quot;, &quot;cre&quot;), email = &quot;package.creator@mypkg.com&quot;), person(given = &quot;Package&quot;, family = &quot;Contributor&quot;, role = c(&quot;ctb&quot;), email = &quot;package.contributor@mypkg.com&quot;) ) Description: This is my personal package. It contains some handy functions that I find useful for my projects. License: What license it uses Encoding: UTF-8 LazyData: true 2.4.3 License The last thing we will update now is the software license. The describes how our code can be used and without one people must assume that it can’t be used at all! It is good to be as open and free as you can with your license to make sure your code is as useful to the community as possible. For this example we will use the MIT license which basically says the code can be used for any purpose and doesn’t come with any warranties. There are templates for some of the most common licenses included in usethis. usethis::use_mit_license(&quot;Your Name&quot;) This will update the license field. Package: mypkg Title: My Personal Package Version: 0.0.0.9000 Authors@R: c( person(given = &quot;Package&quot;, family = &quot;Creator&quot;, role = c(&quot;aut&quot;, &quot;cre&quot;), email = &quot;package.creator@mypkg.com&quot;), person(given = &quot;Package&quot;, family = &quot;Contributor&quot;, role = c(&quot;ctb&quot;), email = &quot;package.contributor@mypkg.com&quot;) ) Description: This is my personal package. It contains some handy functions that I find useful for my projects. License: MIT + file LICENSE Encoding: UTF-8 LazyData: true It will also also create two new files, LICENSE.md which contains the text of the MIT license (it’s very short if you want to give it a read) and LICENSE which simply contains: YEAR: 2019 COPYRIGHT HOLDER: Your Name There are various other licenses you can use but make sure you choose one designed for software not other kinds of content. For example the Creative Commons licenses are great for writing or images but aren’t designed for code. For more information about different licenses and what they cover have a look at http://choosealicense.com/ or https://tldrlegal.com/. For a good discussion about why it is important to declare a license read this blog post by Jeff Attwood http://blog.codinghorror.com/pick-a-license-any-license/. "],
["functions.html", "3 Functions 3.1 Adding a function 3.2 Using the function", " 3 Functions 3.1 Adding a function Now that our package is all set up it’s time to add our first function! We can use the usethis::use_r() function to set up the file. Our function is going to be about colours so we will use that as the name of the R file. usethis::use_r(&quot;colours&quot;) Organising your code There are no rules about how to organise your functions into different files but you want generally want to group similar functions into a file with a a clear name. Having all of your functions in a single file isn’t great, but neither is having a separate file for each function. A good rule of thumb is that if you are finding it hard to locate a function you might need to move it to a new file. There are two shortcuts for finding functions in RStudio, selecting a function name and pressing F2 or pressing Ctrl + . and searching for the function. As an example we are going to write a function that takes the red, green and blue values for a colour and returns a given number of shades. Copy the following code into your R file and save it (you can ignore the comments if you want to, they are just there to explain how the function works). make_shades &lt;- function(red, green, blue, n, lighter = TRUE) { # Convert the colour to RGB colour_rgb &lt;- grDevices::col2rgb(colour)[, 1] # Decide if we are heading towards white or black if (lighter) { end &lt;- 255 } else { end &lt;- 0 } # Calculate the red, green and blue for the shades # we calculate one extra point to avoid pure white/black red &lt;- seq(colour_rgb[1], end, length.out = n + 1)[1:n] green &lt;- seq(colour_rgb[2], end, length.out = n + 1)[1:n] blue &lt;- seq(colour_rgb[3], end, length.out = n + 1)[1:n] # Convert the RGB values to hex codes shades &lt;- grDevices::rgb(red, green, blue, maxColorValue = 255) return(shades) } 3.2 Using the function Now that we have a function we want to see if it works. Usually when we write a new function we load it by copying the code to the console or sourcing the R file. When we are developing a package we want to try and keep our environment empty so that we can be sure we are only working with objects inside the package. Instead we can load functions using devtools::load_all(). devtools::load_all() The function doesn’t appear in the environment, just like all the functions in a package don’t appear in the environment when we load it using library(). But if we try to use it the function should work. make_shades(&quot;goldenrod&quot;, 5) Congratulations, you now have a functional package! In the next section we will perform some checks to see if we have forgotten anything. "],
["references.html", "References", " References "]
]
